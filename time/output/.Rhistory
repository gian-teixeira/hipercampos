library(rstudioapi)
library(extrafont)
library(ggplot2)
data_frame_name <- c()
#CONFIGURAÇÕES:
#=============================================================================
#Defina o nome dos arquivo a ser lido, a fonte a ser usada, a resolução do
#gráfico ao final, a cor da curva de regreção, a cor dos pontos
#a equação a ser comparada e o tamanho da fonte dos eixos
data_frame_name[1] <- "compute_system_time"
data_frame_name[2] <- "compute_user_time"
data_frame_name[3] <- "io_time"
data_frame_name[4] <- "total_day_time"
data_frame_name[5] <- "total_system_time"
data_frame_name[6] <- "total_user_time"
fonte <- "Libre Baskerville"
Resolucao_w <- 4000
Resolucao_h <- 2000
line_color <- "black"
point_color <- "#899499"
equacao = function(x){0.0000025*((3*x*x) - (3*x))}
equacao2 = function(x){0.000012*(x*x)}
tamanho_fonte <- 35
#=============================================================================
#Utiliza o diretório padrão
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#Importa fontes a serem usadas nos gráficos
font_import(paths="../fonts")
setwd("../../../time/output")
#define o tema dos gráficos
theme_set(theme(panel.grid.major=element_blank(), panel.grid.minor=element_blank(), legend.position = "right",
panel.background=element_blank(), axis.line=element_line(colour="black"),
text=element_text(size=tamanho_fonte, family=fonte)))
#Importa o Dataframe a ser usado no gráfico
in_file_name <- paste(data_frame_name[1], ".csv", sep="")
dados <- read.csv2(in_file_name, header=FALSE, sep=";", dec=".")
in_file_name2 <- paste(data_frame_name[2], ".csv", sep="")
dados2 <- read.csv2(in_file_name2, header=FALSE, sep=";", dec=".")
in_file_name3 <- paste(data_frame_name[3], ".csv", sep="")
dados3 <- read.csv2(in_file_name3, header=FALSE, sep=";", dec=".")
in_file_name4 <- paste(data_frame_name[4], ".csv", sep="")
dados4 <- read.csv2(in_file_name4, header=FALSE, sep=";", dec=".")
in_file_name5 <- paste(data_frame_name[6], ".csv", sep="")
dados5 <- read.csv2(in_file_name5, header=FALSE, sep=";", dec=".")
in_file_name6 <- paste(data_frame_name[2], ".csv", sep="")
dados6 <- read.csv2(in_file_name6, header=FALSE, sep=";", dec=".")
equacao = function(x){0.000015*((x*x) - (x))}
ggplot(data.frame(dados), aes(V1,V2)) + stat_function(fun=equacao,linewidth=1) + xlab("Entradas(n)") + ylab("Tempo(ms)") +
geom_smooth(data=dados4,method="loess",color="#D45555",se=FALSE,linewidth=1) + # total time of day
geom_smooth(data=dados2,method="loess",color="#54548C",se=FALSE,linewidth=1,linetype="longdash") + # compute user time
geom_smooth(data=dados3,method="loess",color="#00460C",se=FALSE,linewidth=1) + # io time
geom_smooth(data=dados,method="loess",color="#949494",se=FALSE,linetype="longdash",linewidth=1) # process system time
ggsave("conjunto_total.png", path="../plots", width=Resolucao_w, height=Resolucao_h, units="px")
ggplot(dados5, aes(V1,V2)) + xlab("Entradas(n)") + ylab("Tempo(ms)") +
geom_smooth(method="loess", color="#EBA55E", se=FALSE) + #total user time
geom_smooth(data= dados6, method="loess",color="#54548C",linetype="longdash",se=FALSE) #compute user time
ggsave("conjunto_io.png", path="../plots", width=Resolucao_w, height=Resolucao_h, units="px")
